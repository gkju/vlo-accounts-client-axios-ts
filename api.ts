/* tslint:disable */
/* eslint-disable */
/**
 * ASP.NETCore_suvlo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: gkjuszczyk@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MicrosoftAspNetCoreMvcProblemDetails
 */
export interface MicrosoftAspNetCoreMvcProblemDetails {
    [key: string]: any | any;

    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    type?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    title?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    status?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    detail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MicrosoftAspNetCoreMvcProblemDetails
     */
    instance?: string | null;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthConfirmEmailInputModel
 */
export interface VLOBOARDSAreasAuthConfirmEmailInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthConfirmEmailInputModel
     */
    userId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthConfirmEmailInputModel
     */
    code?: string | null;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthExternalLoginRegisterInputModel
 */
export interface VLOBOARDSAreasAuthExternalLoginRegisterInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthExternalLoginRegisterInputModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthExternalLoginRegisterInputModel
     */
    username: string;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthForgotPasswordInputModel
 */
export interface VLOBOARDSAreasAuthForgotPasswordInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthForgotPasswordInputModel
     */
    email: string;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthLogin2FAInputModel
 */
export interface VLOBOARDSAreasAuthLogin2FAInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLogin2FAInputModel
     */
    twoFactorCode: string;
    /**
     * 
     * @type {boolean}
     * @memberof VLOBOARDSAreasAuthLogin2FAInputModel
     */
    rememberMachine?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VLOBOARDSAreasAuthLogin2FAInputModel
     */
    rememberMe?: boolean;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthLoginInputModel
 */
export interface VLOBOARDSAreasAuthLoginInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLoginInputModel
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLoginInputModel
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof VLOBOARDSAreasAuthLoginInputModel
     */
    rememberMe: boolean;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLoginInputModel
     */
    captchaResponse: string;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthLoginResult
 */
export interface VLOBOARDSAreasAuthLoginResult {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLoginResult
     */
    message?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof VLOBOARDSAreasAuthLoginResult
     */
    redirect?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLoginResult
     */
    returnUrl?: string | null;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel
 */
export interface VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel
     */
    recoveryCode: string;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthLoginWithRecoveryCodeResult
 */
export interface VLOBOARDSAreasAuthLoginWithRecoveryCodeResult {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLoginWithRecoveryCodeResult
     */
    message?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof VLOBOARDSAreasAuthLoginWithRecoveryCodeResult
     */
    redirect?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLoginWithRecoveryCodeResult
     */
    returnUrl?: string | null;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthLogoutResult
 */
export interface VLOBOARDSAreasAuthLogoutResult {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLogoutResult
     */
    message?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof VLOBOARDSAreasAuthLogoutResult
     */
    redirect?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthLogoutResult
     */
    returnUrl?: string | null;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthRegisterInputModel
 */
export interface VLOBOARDSAreasAuthRegisterInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthRegisterInputModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthRegisterInputModel
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthRegisterInputModel
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthRegisterInputModel
     */
    captchaResponse: string;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthRegistrationResult
 */
export interface VLOBOARDSAreasAuthRegistrationResult {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthRegistrationResult
     */
    message?: string | null;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthResendEmailConfirmationInputModel
 */
export interface VLOBOARDSAreasAuthResendEmailConfirmationInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthResendEmailConfirmationInputModel
     */
    email: string;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthResetPasswordInputModel
 */
export interface VLOBOARDSAreasAuthResetPasswordInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthResetPasswordInputModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthResetPasswordInputModel
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthResetPasswordInputModel
     */
    confirmPassword?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthResetPasswordInputModel
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthResetPasswordInputModel
     */
    captchaResponse: string;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthReturnUrlInfo
 */
export interface VLOBOARDSAreasAuthReturnUrlInfo {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthReturnUrlInfo
     */
    safeReturnUrl?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof VLOBOARDSAreasAuthReturnUrlInfo
     */
    validReturnUrl?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof VLOBOARDSAreasAuthReturnUrlInfo
     */
    clientInfo?: boolean;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthReturnUrlInfo
     */
    clientName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthReturnUrlInfo
     */
    clientUri?: string | null;
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthReturnUrlInfo
     */
    clientLogoUrl?: string | null;
}
/**
 * 
 * @export
 * @interface VLOBOARDSAreasAuthReturnUrlInfoInputModel
 */
export interface VLOBOARDSAreasAuthReturnUrlInfoInputModel {
    /**
     * 
     * @type {string}
     * @memberof VLOBOARDSAreasAuthReturnUrlInfoInputModel
     */
    returnUrl: string;
}

/**
 * ConfirmEmailApi - axios parameter creator
 * @export
 */
export const ConfirmEmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Confirms email using provided userid and code
         * @param {VLOBOARDSAreasAuthConfirmEmailInputModel} [vLOBOARDSAreasAuthConfirmEmailInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthConfirmEmailPost: async (vLOBOARDSAreasAuthConfirmEmailInputModel?: VLOBOARDSAreasAuthConfirmEmailInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/ConfirmEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthConfirmEmailInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfirmEmailApi - functional programming interface
 * @export
 */
export const ConfirmEmailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfirmEmailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Confirms email using provided userid and code
         * @param {VLOBOARDSAreasAuthConfirmEmailInputModel} [vLOBOARDSAreasAuthConfirmEmailInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthConfirmEmailPost(vLOBOARDSAreasAuthConfirmEmailInputModel?: VLOBOARDSAreasAuthConfirmEmailInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthConfirmEmailPost(vLOBOARDSAreasAuthConfirmEmailInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfirmEmailApi - factory interface
 * @export
 */
export const ConfirmEmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfirmEmailApiFp(configuration)
    return {
        /**
         * 
         * @summary Confirms email using provided userid and code
         * @param {VLOBOARDSAreasAuthConfirmEmailInputModel} [vLOBOARDSAreasAuthConfirmEmailInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthConfirmEmailPost(vLOBOARDSAreasAuthConfirmEmailInputModel?: VLOBOARDSAreasAuthConfirmEmailInputModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthConfirmEmailPost(vLOBOARDSAreasAuthConfirmEmailInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfirmEmailApi - object-oriented interface
 * @export
 * @class ConfirmEmailApi
 * @extends {BaseAPI}
 */
export class ConfirmEmailApi extends BaseAPI {
    /**
     * 
     * @summary Confirms email using provided userid and code
     * @param {VLOBOARDSAreasAuthConfirmEmailInputModel} [vLOBOARDSAreasAuthConfirmEmailInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfirmEmailApi
     */
    public apiAuthConfirmEmailPost(vLOBOARDSAreasAuthConfirmEmailInputModel?: VLOBOARDSAreasAuthConfirmEmailInputModel, options?: any) {
        return ConfirmEmailApiFp(this.configuration).apiAuthConfirmEmailPost(vLOBOARDSAreasAuthConfirmEmailInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExternalLoginApi - axios parameter creator
 * @export
 */
export const ExternalLoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Callback executed when external auth provider redirects back to app
         * @param {string} [returnUrl] 
         * @param {string} [remoteError] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCallbackGet: async (returnUrl?: string, remoteError?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/ExternalLogin/Callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }

            if (remoteError !== undefined) {
                localVarQueryParameter['remoteError'] = remoteError;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Endpoint used for creating accounts when there\'s no account associated with external login
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthExternalLoginRegisterInputModel} [vLOBOARDSAreasAuthExternalLoginRegisterInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCreateAccountPost: async (returnUrl?: string, vLOBOARDSAreasAuthExternalLoginRegisterInputModel?: VLOBOARDSAreasAuthExternalLoginRegisterInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/ExternalLogin/CreateAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthExternalLoginRegisterInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Challenges user using external provider
         * @param {string} [provider] 
         * @param {string} [returnUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginGet: async (provider?: string, returnUrl?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/ExternalLogin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalLoginApi - functional programming interface
 * @export
 */
export const ExternalLoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalLoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Callback executed when external auth provider redirects back to app
         * @param {string} [returnUrl] 
         * @param {string} [remoteError] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthExternalLoginCallbackGet(returnUrl?: string, remoteError?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthExternalLoginCallbackGet(returnUrl, remoteError, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Endpoint used for creating accounts when there\'s no account associated with external login
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthExternalLoginRegisterInputModel} [vLOBOARDSAreasAuthExternalLoginRegisterInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthExternalLoginCreateAccountPost(returnUrl?: string, vLOBOARDSAreasAuthExternalLoginRegisterInputModel?: VLOBOARDSAreasAuthExternalLoginRegisterInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthExternalLoginCreateAccountPost(returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Challenges user using external provider
         * @param {string} [provider] 
         * @param {string} [returnUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthExternalLoginGet(provider?: string, returnUrl?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthExternalLoginGet(provider, returnUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExternalLoginApi - factory interface
 * @export
 */
export const ExternalLoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalLoginApiFp(configuration)
    return {
        /**
         * 
         * @summary Callback executed when external auth provider redirects back to app
         * @param {string} [returnUrl] 
         * @param {string} [remoteError] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCallbackGet(returnUrl?: string, remoteError?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthExternalLoginCallbackGet(returnUrl, remoteError, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Endpoint used for creating accounts when there\'s no account associated with external login
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthExternalLoginRegisterInputModel} [vLOBOARDSAreasAuthExternalLoginRegisterInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCreateAccountPost(returnUrl?: string, vLOBOARDSAreasAuthExternalLoginRegisterInputModel?: VLOBOARDSAreasAuthExternalLoginRegisterInputModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthExternalLoginCreateAccountPost(returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Challenges user using external provider
         * @param {string} [provider] 
         * @param {string} [returnUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginGet(provider?: string, returnUrl?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthExternalLoginGet(provider, returnUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExternalLoginApi - object-oriented interface
 * @export
 * @class ExternalLoginApi
 * @extends {BaseAPI}
 */
export class ExternalLoginApi extends BaseAPI {
    /**
     * 
     * @summary Callback executed when external auth provider redirects back to app
     * @param {string} [returnUrl] 
     * @param {string} [remoteError] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalLoginApi
     */
    public apiAuthExternalLoginCallbackGet(returnUrl?: string, remoteError?: string, options?: any) {
        return ExternalLoginApiFp(this.configuration).apiAuthExternalLoginCallbackGet(returnUrl, remoteError, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Endpoint used for creating accounts when there\'s no account associated with external login
     * @param {string} [returnUrl] 
     * @param {VLOBOARDSAreasAuthExternalLoginRegisterInputModel} [vLOBOARDSAreasAuthExternalLoginRegisterInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalLoginApi
     */
    public apiAuthExternalLoginCreateAccountPost(returnUrl?: string, vLOBOARDSAreasAuthExternalLoginRegisterInputModel?: VLOBOARDSAreasAuthExternalLoginRegisterInputModel, options?: any) {
        return ExternalLoginApiFp(this.configuration).apiAuthExternalLoginCreateAccountPost(returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Challenges user using external provider
     * @param {string} [provider] 
     * @param {string} [returnUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalLoginApi
     */
    public apiAuthExternalLoginGet(provider?: string, returnUrl?: string, options?: any) {
        return ExternalLoginApiFp(this.configuration).apiAuthExternalLoginGet(provider, returnUrl, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ForgotPasswordApi - axios parameter creator
 * @export
 */
export const ForgotPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sends password reset email based on given email
         * @param {VLOBOARDSAreasAuthForgotPasswordInputModel} [vLOBOARDSAreasAuthForgotPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthForgotPasswordPost: async (vLOBOARDSAreasAuthForgotPasswordInputModel?: VLOBOARDSAreasAuthForgotPasswordInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/ForgotPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthForgotPasswordInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ForgotPasswordApi - functional programming interface
 * @export
 */
export const ForgotPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ForgotPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sends password reset email based on given email
         * @param {VLOBOARDSAreasAuthForgotPasswordInputModel} [vLOBOARDSAreasAuthForgotPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthForgotPasswordPost(vLOBOARDSAreasAuthForgotPasswordInputModel?: VLOBOARDSAreasAuthForgotPasswordInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthForgotPasswordPost(vLOBOARDSAreasAuthForgotPasswordInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ForgotPasswordApi - factory interface
 * @export
 */
export const ForgotPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ForgotPasswordApiFp(configuration)
    return {
        /**
         * 
         * @summary Sends password reset email based on given email
         * @param {VLOBOARDSAreasAuthForgotPasswordInputModel} [vLOBOARDSAreasAuthForgotPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthForgotPasswordPost(vLOBOARDSAreasAuthForgotPasswordInputModel?: VLOBOARDSAreasAuthForgotPasswordInputModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthForgotPasswordPost(vLOBOARDSAreasAuthForgotPasswordInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ForgotPasswordApi - object-oriented interface
 * @export
 * @class ForgotPasswordApi
 * @extends {BaseAPI}
 */
export class ForgotPasswordApi extends BaseAPI {
    /**
     * 
     * @summary Sends password reset email based on given email
     * @param {VLOBOARDSAreasAuthForgotPasswordInputModel} [vLOBOARDSAreasAuthForgotPasswordInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForgotPasswordApi
     */
    public apiAuthForgotPasswordPost(vLOBOARDSAreasAuthForgotPasswordInputModel?: VLOBOARDSAreasAuthForgotPasswordInputModel, options?: any) {
        return ForgotPasswordApiFp(this.configuration).apiAuthForgotPasswordPost(vLOBOARDSAreasAuthForgotPasswordInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginClearExternalCookiesPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Login/ClearExternalCookies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Endpoint used to log user in based on username, password
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthLoginInputModel} [vLOBOARDSAreasAuthLoginInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (returnUrl?: string, vLOBOARDSAreasAuthLoginInputModel?: VLOBOARDSAreasAuthLoginInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthLoginInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginClearExternalCookiesPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginClearExternalCookiesPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Endpoint used to log user in based on username, password
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthLoginInputModel} [vLOBOARDSAreasAuthLoginInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(returnUrl?: string, vLOBOARDSAreasAuthLoginInputModel?: VLOBOARDSAreasAuthLoginInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VLOBOARDSAreasAuthLoginResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(returnUrl, vLOBOARDSAreasAuthLoginInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginClearExternalCookiesPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthLoginClearExternalCookiesPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Endpoint used to log user in based on username, password
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthLoginInputModel} [vLOBOARDSAreasAuthLoginInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(returnUrl?: string, vLOBOARDSAreasAuthLoginInputModel?: VLOBOARDSAreasAuthLoginInputModel, options?: any): AxiosPromise<VLOBOARDSAreasAuthLoginResult> {
            return localVarFp.apiAuthLoginPost(returnUrl, vLOBOARDSAreasAuthLoginInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiAuthLoginClearExternalCookiesPost(options?: any) {
        return LoginApiFp(this.configuration).apiAuthLoginClearExternalCookiesPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Endpoint used to log user in based on username, password
     * @param {string} [returnUrl] 
     * @param {VLOBOARDSAreasAuthLoginInputModel} [vLOBOARDSAreasAuthLoginInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiAuthLoginPost(returnUrl?: string, vLOBOARDSAreasAuthLoginInputModel?: VLOBOARDSAreasAuthLoginInputModel, options?: any) {
        return LoginApiFp(this.configuration).apiAuthLoginPost(returnUrl, vLOBOARDSAreasAuthLoginInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * Login2FAApi - axios parameter creator
 * @export
 */
export const Login2FAApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Logs user in based on 2FA code
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthLogin2FAInputModel} [vLOBOARDSAreasAuthLogin2FAInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogin2FAPost: async (returnUrl?: string, vLOBOARDSAreasAuthLogin2FAInputModel?: VLOBOARDSAreasAuthLogin2FAInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Login2FA`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthLogin2FAInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Login2FAApi - functional programming interface
 * @export
 */
export const Login2FAApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = Login2FAApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Logs user in based on 2FA code
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthLogin2FAInputModel} [vLOBOARDSAreasAuthLogin2FAInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogin2FAPost(returnUrl?: string, vLOBOARDSAreasAuthLogin2FAInputModel?: VLOBOARDSAreasAuthLogin2FAInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VLOBOARDSAreasAuthLoginResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogin2FAPost(returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * Login2FAApi - factory interface
 * @export
 */
export const Login2FAApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = Login2FAApiFp(configuration)
    return {
        /**
         * 
         * @summary Logs user in based on 2FA code
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthLogin2FAInputModel} [vLOBOARDSAreasAuthLogin2FAInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogin2FAPost(returnUrl?: string, vLOBOARDSAreasAuthLogin2FAInputModel?: VLOBOARDSAreasAuthLogin2FAInputModel, options?: any): AxiosPromise<VLOBOARDSAreasAuthLoginResult> {
            return localVarFp.apiAuthLogin2FAPost(returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Login2FAApi - object-oriented interface
 * @export
 * @class Login2FAApi
 * @extends {BaseAPI}
 */
export class Login2FAApi extends BaseAPI {
    /**
     * 
     * @summary Logs user in based on 2FA code
     * @param {string} [returnUrl] 
     * @param {VLOBOARDSAreasAuthLogin2FAInputModel} [vLOBOARDSAreasAuthLogin2FAInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Login2FAApi
     */
    public apiAuthLogin2FAPost(returnUrl?: string, vLOBOARDSAreasAuthLogin2FAInputModel?: VLOBOARDSAreasAuthLogin2FAInputModel, options?: any) {
        return Login2FAApiFp(this.configuration).apiAuthLogin2FAPost(returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginWithRecoveryCodeApi - axios parameter creator
 * @export
 */
export const LoginWithRecoveryCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Also sanitizes returnurl. Who could\'ve thought
         * @summary Logins user using 2fa recovery code
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel} [vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginWithRecoveryCodePost: async (returnUrl?: string, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel?: VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/LoginWithRecoveryCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginWithRecoveryCodeApi - functional programming interface
 * @export
 */
export const LoginWithRecoveryCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginWithRecoveryCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Also sanitizes returnurl. Who could\'ve thought
         * @summary Logins user using 2fa recovery code
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel} [vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginWithRecoveryCodePost(returnUrl?: string, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel?: VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VLOBOARDSAreasAuthLoginWithRecoveryCodeResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginWithRecoveryCodePost(returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginWithRecoveryCodeApi - factory interface
 * @export
 */
export const LoginWithRecoveryCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginWithRecoveryCodeApiFp(configuration)
    return {
        /**
         * Also sanitizes returnurl. Who could\'ve thought
         * @summary Logins user using 2fa recovery code
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel} [vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginWithRecoveryCodePost(returnUrl?: string, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel?: VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options?: any): AxiosPromise<VLOBOARDSAreasAuthLoginWithRecoveryCodeResult> {
            return localVarFp.apiAuthLoginWithRecoveryCodePost(returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginWithRecoveryCodeApi - object-oriented interface
 * @export
 * @class LoginWithRecoveryCodeApi
 * @extends {BaseAPI}
 */
export class LoginWithRecoveryCodeApi extends BaseAPI {
    /**
     * Also sanitizes returnurl. Who could\'ve thought
     * @summary Logins user using 2fa recovery code
     * @param {string} [returnUrl] 
     * @param {VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel} [vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginWithRecoveryCodeApi
     */
    public apiAuthLoginWithRecoveryCodePost(returnUrl?: string, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel?: VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options?: any) {
        return LoginWithRecoveryCodeApiFp(this.configuration).apiAuthLoginWithRecoveryCodePost(returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogoutApi - axios parameter creator
 * @export
 */
export const LogoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Will sanitize returnurl
         * @summary Logs user out
         * @param {string} [returnUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost: async (returnUrl?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogoutApi - functional programming interface
 * @export
 */
export const LogoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogoutApiAxiosParamCreator(configuration)
    return {
        /**
         * Will sanitize returnurl
         * @summary Logs user out
         * @param {string} [returnUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutPost(returnUrl?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VLOBOARDSAreasAuthLogoutResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutPost(returnUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogoutApi - factory interface
 * @export
 */
export const LogoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogoutApiFp(configuration)
    return {
        /**
         * Will sanitize returnurl
         * @summary Logs user out
         * @param {string} [returnUrl] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(returnUrl?: string, options?: any): AxiosPromise<VLOBOARDSAreasAuthLogoutResult> {
            return localVarFp.apiAuthLogoutPost(returnUrl, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogoutApi - object-oriented interface
 * @export
 * @class LogoutApi
 * @extends {BaseAPI}
 */
export class LogoutApi extends BaseAPI {
    /**
     * Will sanitize returnurl
     * @summary Logs user out
     * @param {string} [returnUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoutApi
     */
    public apiAuthLogoutPost(returnUrl?: string, options?: any) {
        return LogoutApiFp(this.configuration).apiAuthLogoutPost(returnUrl, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegisterApi - axios parameter creator
 * @export
 */
export const RegisterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthRegisterInputModel} [vLOBOARDSAreasAuthRegisterInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (returnUrl?: string, vLOBOARDSAreasAuthRegisterInputModel?: VLOBOARDSAreasAuthRegisterInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (returnUrl !== undefined) {
                localVarQueryParameter['returnUrl'] = returnUrl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthRegisterInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegisterApi - functional programming interface
 * @export
 */
export const RegisterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegisterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthRegisterInputModel} [vLOBOARDSAreasAuthRegisterInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(returnUrl?: string, vLOBOARDSAreasAuthRegisterInputModel?: VLOBOARDSAreasAuthRegisterInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VLOBOARDSAreasAuthRegistrationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegisterApi - factory interface
 * @export
 */
export const RegisterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegisterApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [returnUrl] 
         * @param {VLOBOARDSAreasAuthRegisterInputModel} [vLOBOARDSAreasAuthRegisterInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(returnUrl?: string, vLOBOARDSAreasAuthRegisterInputModel?: VLOBOARDSAreasAuthRegisterInputModel, options?: any): AxiosPromise<VLOBOARDSAreasAuthRegistrationResult> {
            return localVarFp.apiAuthRegisterPost(returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
export class RegisterApi extends BaseAPI {
    /**
     * 
     * @param {string} [returnUrl] 
     * @param {VLOBOARDSAreasAuthRegisterInputModel} [vLOBOARDSAreasAuthRegisterInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    public apiAuthRegisterPost(returnUrl?: string, vLOBOARDSAreasAuthRegisterInputModel?: VLOBOARDSAreasAuthRegisterInputModel, options?: any) {
        return RegisterApiFp(this.configuration).apiAuthRegisterPost(returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResendEmailConfirmationApi - axios parameter creator
 * @export
 */
export const ResendEmailConfirmationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Resends email confirmation
         * @param {VLOBOARDSAreasAuthResendEmailConfirmationInputModel} [vLOBOARDSAreasAuthResendEmailConfirmationInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResendEmailConfirmationPost: async (vLOBOARDSAreasAuthResendEmailConfirmationInputModel?: VLOBOARDSAreasAuthResendEmailConfirmationInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/ResendEmailConfirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthResendEmailConfirmationInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResendEmailConfirmationApi - functional programming interface
 * @export
 */
export const ResendEmailConfirmationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResendEmailConfirmationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Resends email confirmation
         * @param {VLOBOARDSAreasAuthResendEmailConfirmationInputModel} [vLOBOARDSAreasAuthResendEmailConfirmationInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthResendEmailConfirmationPost(vLOBOARDSAreasAuthResendEmailConfirmationInputModel?: VLOBOARDSAreasAuthResendEmailConfirmationInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthResendEmailConfirmationPost(vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResendEmailConfirmationApi - factory interface
 * @export
 */
export const ResendEmailConfirmationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResendEmailConfirmationApiFp(configuration)
    return {
        /**
         * 
         * @summary Resends email confirmation
         * @param {VLOBOARDSAreasAuthResendEmailConfirmationInputModel} [vLOBOARDSAreasAuthResendEmailConfirmationInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResendEmailConfirmationPost(vLOBOARDSAreasAuthResendEmailConfirmationInputModel?: VLOBOARDSAreasAuthResendEmailConfirmationInputModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthResendEmailConfirmationPost(vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResendEmailConfirmationApi - object-oriented interface
 * @export
 * @class ResendEmailConfirmationApi
 * @extends {BaseAPI}
 */
export class ResendEmailConfirmationApi extends BaseAPI {
    /**
     * 
     * @summary Resends email confirmation
     * @param {VLOBOARDSAreasAuthResendEmailConfirmationInputModel} [vLOBOARDSAreasAuthResendEmailConfirmationInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResendEmailConfirmationApi
     */
    public apiAuthResendEmailConfirmationPost(vLOBOARDSAreasAuthResendEmailConfirmationInputModel?: VLOBOARDSAreasAuthResendEmailConfirmationInputModel, options?: any) {
        return ResendEmailConfirmationApiFp(this.configuration).apiAuthResendEmailConfirmationPost(vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ResetPasswordApi - axios parameter creator
 * @export
 */
export const ResetPasswordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Changes the password to a new one based on input
         * @param {VLOBOARDSAreasAuthResetPasswordInputModel} [vLOBOARDSAreasAuthResetPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost: async (vLOBOARDSAreasAuthResetPasswordInputModel?: VLOBOARDSAreasAuthResetPasswordInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/ResetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthResetPasswordInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResetPasswordApi - functional programming interface
 * @export
 */
export const ResetPasswordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResetPasswordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Changes the password to a new one based on input
         * @param {VLOBOARDSAreasAuthResetPasswordInputModel} [vLOBOARDSAreasAuthResetPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthResetPasswordPost(vLOBOARDSAreasAuthResetPasswordInputModel?: VLOBOARDSAreasAuthResetPasswordInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthResetPasswordPost(vLOBOARDSAreasAuthResetPasswordInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResetPasswordApi - factory interface
 * @export
 */
export const ResetPasswordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResetPasswordApiFp(configuration)
    return {
        /**
         * 
         * @summary Changes the password to a new one based on input
         * @param {VLOBOARDSAreasAuthResetPasswordInputModel} [vLOBOARDSAreasAuthResetPasswordInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost(vLOBOARDSAreasAuthResetPasswordInputModel?: VLOBOARDSAreasAuthResetPasswordInputModel, options?: any): AxiosPromise<string> {
            return localVarFp.apiAuthResetPasswordPost(vLOBOARDSAreasAuthResetPasswordInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResetPasswordApi - object-oriented interface
 * @export
 * @class ResetPasswordApi
 * @extends {BaseAPI}
 */
export class ResetPasswordApi extends BaseAPI {
    /**
     * 
     * @summary Changes the password to a new one based on input
     * @param {VLOBOARDSAreasAuthResetPasswordInputModel} [vLOBOARDSAreasAuthResetPasswordInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordApi
     */
    public apiAuthResetPasswordPost(vLOBOARDSAreasAuthResetPasswordInputModel?: VLOBOARDSAreasAuthResetPasswordInputModel, options?: any) {
        return ResetPasswordApiFp(this.configuration).apiAuthResetPasswordPost(vLOBOARDSAreasAuthResetPasswordInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReturnUrlInfoApi - axios parameter creator
 * @export
 */
export const ReturnUrlInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use every time you need to check whether to redirect to returnurl
         * @summary Returns information about client associated with returnurl
         * @param {VLOBOARDSAreasAuthReturnUrlInfoInputModel} [vLOBOARDSAreasAuthReturnUrlInfoInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthReturnUrlInfoPost: async (vLOBOARDSAreasAuthReturnUrlInfoInputModel?: VLOBOARDSAreasAuthReturnUrlInfoInputModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/ReturnUrlInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthReturnUrlInfoInputModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReturnUrlInfoApi - functional programming interface
 * @export
 */
export const ReturnUrlInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReturnUrlInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * Use every time you need to check whether to redirect to returnurl
         * @summary Returns information about client associated with returnurl
         * @param {VLOBOARDSAreasAuthReturnUrlInfoInputModel} [vLOBOARDSAreasAuthReturnUrlInfoInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthReturnUrlInfoPost(vLOBOARDSAreasAuthReturnUrlInfoInputModel?: VLOBOARDSAreasAuthReturnUrlInfoInputModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VLOBOARDSAreasAuthReturnUrlInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthReturnUrlInfoPost(vLOBOARDSAreasAuthReturnUrlInfoInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReturnUrlInfoApi - factory interface
 * @export
 */
export const ReturnUrlInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReturnUrlInfoApiFp(configuration)
    return {
        /**
         * Use every time you need to check whether to redirect to returnurl
         * @summary Returns information about client associated with returnurl
         * @param {VLOBOARDSAreasAuthReturnUrlInfoInputModel} [vLOBOARDSAreasAuthReturnUrlInfoInputModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthReturnUrlInfoPost(vLOBOARDSAreasAuthReturnUrlInfoInputModel?: VLOBOARDSAreasAuthReturnUrlInfoInputModel, options?: any): AxiosPromise<VLOBOARDSAreasAuthReturnUrlInfo> {
            return localVarFp.apiAuthReturnUrlInfoPost(vLOBOARDSAreasAuthReturnUrlInfoInputModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReturnUrlInfoApi - object-oriented interface
 * @export
 * @class ReturnUrlInfoApi
 * @extends {BaseAPI}
 */
export class ReturnUrlInfoApi extends BaseAPI {
    /**
     * Use every time you need to check whether to redirect to returnurl
     * @summary Returns information about client associated with returnurl
     * @param {VLOBOARDSAreasAuthReturnUrlInfoInputModel} [vLOBOARDSAreasAuthReturnUrlInfoInputModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnUrlInfoApi
     */
    public apiAuthReturnUrlInfoPost(vLOBOARDSAreasAuthReturnUrlInfoInputModel?: VLOBOARDSAreasAuthReturnUrlInfoInputModel, options?: any) {
        return ReturnUrlInfoApiFp(this.configuration).apiAuthReturnUrlInfoPost(vLOBOARDSAreasAuthReturnUrlInfoInputModel, options).then((request) => request(this.axios, this.basePath));
    }
}


