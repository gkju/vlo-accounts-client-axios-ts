/* tslint:disable */
/* eslint-disable */
/**
 * ASP.NETCore_suvlo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: gkjuszczyk@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from './base';
/**
 * ConfirmEmailApi - axios parameter creator
 * @export
 */
export var ConfirmEmailApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Confirms email using provided userid and code
         * @param {VLOBOARDSAreasAuthConfirmEmailInputModel} [vLOBOARDSAreasAuthConfirmEmailInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthConfirmEmailPost: function (vLOBOARDSAreasAuthConfirmEmailInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/ConfirmEmail";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthConfirmEmailInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ConfirmEmailApi - functional programming interface
 * @export
 */
export var ConfirmEmailApiFp = function (configuration) {
    var localVarAxiosParamCreator = ConfirmEmailApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Confirms email using provided userid and code
         * @param {VLOBOARDSAreasAuthConfirmEmailInputModel} [vLOBOARDSAreasAuthConfirmEmailInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthConfirmEmailPost: function (vLOBOARDSAreasAuthConfirmEmailInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthConfirmEmailPost(vLOBOARDSAreasAuthConfirmEmailInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ConfirmEmailApi - factory interface
 * @export
 */
export var ConfirmEmailApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ConfirmEmailApiFp(configuration);
    return {
        /**
         *
         * @summary Confirms email using provided userid and code
         * @param {VLOBOARDSAreasAuthConfirmEmailInputModel} [vLOBOARDSAreasAuthConfirmEmailInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthConfirmEmailPost: function (vLOBOARDSAreasAuthConfirmEmailInputModel, options) {
            return localVarFp.apiAuthConfirmEmailPost(vLOBOARDSAreasAuthConfirmEmailInputModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ConfirmEmailApi - object-oriented interface
 * @export
 * @class ConfirmEmailApi
 * @extends {BaseAPI}
 */
var ConfirmEmailApi = /** @class */ (function (_super) {
    __extends(ConfirmEmailApi, _super);
    function ConfirmEmailApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Confirms email using provided userid and code
     * @param {VLOBOARDSAreasAuthConfirmEmailInputModel} [vLOBOARDSAreasAuthConfirmEmailInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfirmEmailApi
     */
    ConfirmEmailApi.prototype.apiAuthConfirmEmailPost = function (vLOBOARDSAreasAuthConfirmEmailInputModel, options) {
        var _this = this;
        return ConfirmEmailApiFp(this.configuration).apiAuthConfirmEmailPost(vLOBOARDSAreasAuthConfirmEmailInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConfirmEmailApi;
}(BaseAPI));
export { ConfirmEmailApi };
/**
 * ExternalLoginApi - axios parameter creator
 * @export
 */
export var ExternalLoginApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Callback executed when external auth provider redirects back to app
         * @param {string} [returnUrl]
         * @param {string} [remoteError]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCallbackGet: function (returnUrl, remoteError, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/ExternalLogin/Callback";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (returnUrl !== undefined) {
                        localVarQueryParameter['returnUrl'] = returnUrl;
                    }
                    if (remoteError !== undefined) {
                        localVarQueryParameter['remoteError'] = remoteError;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Endpoint used for creating accounts when there\'s no account associated with external login
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthExternalLoginRegisterInputModel} [vLOBOARDSAreasAuthExternalLoginRegisterInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCreateAccountPost: function (returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/ExternalLogin/CreateAccount";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (returnUrl !== undefined) {
                        localVarQueryParameter['returnUrl'] = returnUrl;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthExternalLoginRegisterInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Challenges user using external provider
         * @param {string} [provider]
         * @param {string} [returnUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginGet: function (provider, returnUrl, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/ExternalLogin";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (provider !== undefined) {
                        localVarQueryParameter['provider'] = provider;
                    }
                    if (returnUrl !== undefined) {
                        localVarQueryParameter['returnUrl'] = returnUrl;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ExternalLoginApi - functional programming interface
 * @export
 */
export var ExternalLoginApiFp = function (configuration) {
    var localVarAxiosParamCreator = ExternalLoginApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Callback executed when external auth provider redirects back to app
         * @param {string} [returnUrl]
         * @param {string} [remoteError]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCallbackGet: function (returnUrl, remoteError, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthExternalLoginCallbackGet(returnUrl, remoteError, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Endpoint used for creating accounts when there\'s no account associated with external login
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthExternalLoginRegisterInputModel} [vLOBOARDSAreasAuthExternalLoginRegisterInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCreateAccountPost: function (returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthExternalLoginCreateAccountPost(returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Challenges user using external provider
         * @param {string} [provider]
         * @param {string} [returnUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginGet: function (provider, returnUrl, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthExternalLoginGet(provider, returnUrl, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ExternalLoginApi - factory interface
 * @export
 */
export var ExternalLoginApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ExternalLoginApiFp(configuration);
    return {
        /**
         *
         * @summary Callback executed when external auth provider redirects back to app
         * @param {string} [returnUrl]
         * @param {string} [remoteError]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCallbackGet: function (returnUrl, remoteError, options) {
            return localVarFp.apiAuthExternalLoginCallbackGet(returnUrl, remoteError, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Endpoint used for creating accounts when there\'s no account associated with external login
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthExternalLoginRegisterInputModel} [vLOBOARDSAreasAuthExternalLoginRegisterInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginCreateAccountPost: function (returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options) {
            return localVarFp.apiAuthExternalLoginCreateAccountPost(returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Challenges user using external provider
         * @param {string} [provider]
         * @param {string} [returnUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthExternalLoginGet: function (provider, returnUrl, options) {
            return localVarFp.apiAuthExternalLoginGet(provider, returnUrl, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ExternalLoginApi - object-oriented interface
 * @export
 * @class ExternalLoginApi
 * @extends {BaseAPI}
 */
var ExternalLoginApi = /** @class */ (function (_super) {
    __extends(ExternalLoginApi, _super);
    function ExternalLoginApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Callback executed when external auth provider redirects back to app
     * @param {string} [returnUrl]
     * @param {string} [remoteError]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalLoginApi
     */
    ExternalLoginApi.prototype.apiAuthExternalLoginCallbackGet = function (returnUrl, remoteError, options) {
        var _this = this;
        return ExternalLoginApiFp(this.configuration).apiAuthExternalLoginCallbackGet(returnUrl, remoteError, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Endpoint used for creating accounts when there\'s no account associated with external login
     * @param {string} [returnUrl]
     * @param {VLOBOARDSAreasAuthExternalLoginRegisterInputModel} [vLOBOARDSAreasAuthExternalLoginRegisterInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalLoginApi
     */
    ExternalLoginApi.prototype.apiAuthExternalLoginCreateAccountPost = function (returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options) {
        var _this = this;
        return ExternalLoginApiFp(this.configuration).apiAuthExternalLoginCreateAccountPost(returnUrl, vLOBOARDSAreasAuthExternalLoginRegisterInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Challenges user using external provider
     * @param {string} [provider]
     * @param {string} [returnUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalLoginApi
     */
    ExternalLoginApi.prototype.apiAuthExternalLoginGet = function (provider, returnUrl, options) {
        var _this = this;
        return ExternalLoginApiFp(this.configuration).apiAuthExternalLoginGet(provider, returnUrl, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ExternalLoginApi;
}(BaseAPI));
export { ExternalLoginApi };
/**
 * ForgotPasswordApi - axios parameter creator
 * @export
 */
export var ForgotPasswordApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Sends password reset email based on given email
         * @param {VLOBOARDSAreasAuthForgotPasswordInputModel} [vLOBOARDSAreasAuthForgotPasswordInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthForgotPasswordPost: function (vLOBOARDSAreasAuthForgotPasswordInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/ForgotPassword";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthForgotPasswordInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ForgotPasswordApi - functional programming interface
 * @export
 */
export var ForgotPasswordApiFp = function (configuration) {
    var localVarAxiosParamCreator = ForgotPasswordApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Sends password reset email based on given email
         * @param {VLOBOARDSAreasAuthForgotPasswordInputModel} [vLOBOARDSAreasAuthForgotPasswordInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthForgotPasswordPost: function (vLOBOARDSAreasAuthForgotPasswordInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthForgotPasswordPost(vLOBOARDSAreasAuthForgotPasswordInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ForgotPasswordApi - factory interface
 * @export
 */
export var ForgotPasswordApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ForgotPasswordApiFp(configuration);
    return {
        /**
         *
         * @summary Sends password reset email based on given email
         * @param {VLOBOARDSAreasAuthForgotPasswordInputModel} [vLOBOARDSAreasAuthForgotPasswordInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthForgotPasswordPost: function (vLOBOARDSAreasAuthForgotPasswordInputModel, options) {
            return localVarFp.apiAuthForgotPasswordPost(vLOBOARDSAreasAuthForgotPasswordInputModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ForgotPasswordApi - object-oriented interface
 * @export
 * @class ForgotPasswordApi
 * @extends {BaseAPI}
 */
var ForgotPasswordApi = /** @class */ (function (_super) {
    __extends(ForgotPasswordApi, _super);
    function ForgotPasswordApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Sends password reset email based on given email
     * @param {VLOBOARDSAreasAuthForgotPasswordInputModel} [vLOBOARDSAreasAuthForgotPasswordInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ForgotPasswordApi
     */
    ForgotPasswordApi.prototype.apiAuthForgotPasswordPost = function (vLOBOARDSAreasAuthForgotPasswordInputModel, options) {
        var _this = this;
        return ForgotPasswordApiFp(this.configuration).apiAuthForgotPasswordPost(vLOBOARDSAreasAuthForgotPasswordInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ForgotPasswordApi;
}(BaseAPI));
export { ForgotPasswordApi };
/**
 * LoginApi - axios parameter creator
 * @export
 */
export var LoginApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Endpoint used to log user in based on username, password
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthLoginInputModel} [vLOBOARDSAreasAuthLoginInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: function (returnUrl, vLOBOARDSAreasAuthLoginInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/Login";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (returnUrl !== undefined) {
                        localVarQueryParameter['returnUrl'] = returnUrl;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthLoginInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearExternalCookiesPost: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/ClearExternalCookies";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * LoginApi - functional programming interface
 * @export
 */
export var LoginApiFp = function (configuration) {
    var localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Endpoint used to log user in based on username, password
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthLoginInputModel} [vLOBOARDSAreasAuthLoginInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: function (returnUrl, vLOBOARDSAreasAuthLoginInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthLoginPost(returnUrl, vLOBOARDSAreasAuthLoginInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearExternalCookiesPost: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.clearExternalCookiesPost(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * LoginApi - factory interface
 * @export
 */
export var LoginApiFactory = function (configuration, basePath, axios) {
    var localVarFp = LoginApiFp(configuration);
    return {
        /**
         *
         * @summary Endpoint used to log user in based on username, password
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthLoginInputModel} [vLOBOARDSAreasAuthLoginInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: function (returnUrl, vLOBOARDSAreasAuthLoginInputModel, options) {
            return localVarFp.apiAuthLoginPost(returnUrl, vLOBOARDSAreasAuthLoginInputModel, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearExternalCookiesPost: function (options) {
            return localVarFp.clearExternalCookiesPost(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
var LoginApi = /** @class */ (function (_super) {
    __extends(LoginApi, _super);
    function LoginApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Endpoint used to log user in based on username, password
     * @param {string} [returnUrl]
     * @param {VLOBOARDSAreasAuthLoginInputModel} [vLOBOARDSAreasAuthLoginInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    LoginApi.prototype.apiAuthLoginPost = function (returnUrl, vLOBOARDSAreasAuthLoginInputModel, options) {
        var _this = this;
        return LoginApiFp(this.configuration).apiAuthLoginPost(returnUrl, vLOBOARDSAreasAuthLoginInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    LoginApi.prototype.clearExternalCookiesPost = function (options) {
        var _this = this;
        return LoginApiFp(this.configuration).clearExternalCookiesPost(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LoginApi;
}(BaseAPI));
export { LoginApi };
/**
 * Login2FAApi - axios parameter creator
 * @export
 */
export var Login2FAApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Logs user in based on 2FA code
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthLogin2FAInputModel} [vLOBOARDSAreasAuthLogin2FAInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogin2FAPost: function (returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/Login2FA";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (returnUrl !== undefined) {
                        localVarQueryParameter['returnUrl'] = returnUrl;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthLogin2FAInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * Login2FAApi - functional programming interface
 * @export
 */
export var Login2FAApiFp = function (configuration) {
    var localVarAxiosParamCreator = Login2FAApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Logs user in based on 2FA code
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthLogin2FAInputModel} [vLOBOARDSAreasAuthLogin2FAInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogin2FAPost: function (returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthLogin2FAPost(returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * Login2FAApi - factory interface
 * @export
 */
export var Login2FAApiFactory = function (configuration, basePath, axios) {
    var localVarFp = Login2FAApiFp(configuration);
    return {
        /**
         *
         * @summary Logs user in based on 2FA code
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthLogin2FAInputModel} [vLOBOARDSAreasAuthLogin2FAInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogin2FAPost: function (returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options) {
            return localVarFp.apiAuthLogin2FAPost(returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * Login2FAApi - object-oriented interface
 * @export
 * @class Login2FAApi
 * @extends {BaseAPI}
 */
var Login2FAApi = /** @class */ (function (_super) {
    __extends(Login2FAApi, _super);
    function Login2FAApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Logs user in based on 2FA code
     * @param {string} [returnUrl]
     * @param {VLOBOARDSAreasAuthLogin2FAInputModel} [vLOBOARDSAreasAuthLogin2FAInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Login2FAApi
     */
    Login2FAApi.prototype.apiAuthLogin2FAPost = function (returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options) {
        var _this = this;
        return Login2FAApiFp(this.configuration).apiAuthLogin2FAPost(returnUrl, vLOBOARDSAreasAuthLogin2FAInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return Login2FAApi;
}(BaseAPI));
export { Login2FAApi };
/**
 * LoginWithRecoveryCodeApi - axios parameter creator
 * @export
 */
export var LoginWithRecoveryCodeApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Also sanitizes returnurl. Who could\'ve thought
         * @summary Logins user using 2fa recovery code
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel} [vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginWithRecoveryCodePost: function (returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/LoginWithRecoveryCode";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (returnUrl !== undefined) {
                        localVarQueryParameter['returnUrl'] = returnUrl;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * LoginWithRecoveryCodeApi - functional programming interface
 * @export
 */
export var LoginWithRecoveryCodeApiFp = function (configuration) {
    var localVarAxiosParamCreator = LoginWithRecoveryCodeApiAxiosParamCreator(configuration);
    return {
        /**
         * Also sanitizes returnurl. Who could\'ve thought
         * @summary Logins user using 2fa recovery code
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel} [vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginWithRecoveryCodePost: function (returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthLoginWithRecoveryCodePost(returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * LoginWithRecoveryCodeApi - factory interface
 * @export
 */
export var LoginWithRecoveryCodeApiFactory = function (configuration, basePath, axios) {
    var localVarFp = LoginWithRecoveryCodeApiFp(configuration);
    return {
        /**
         * Also sanitizes returnurl. Who could\'ve thought
         * @summary Logins user using 2fa recovery code
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel} [vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginWithRecoveryCodePost: function (returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options) {
            return localVarFp.apiAuthLoginWithRecoveryCodePost(returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * LoginWithRecoveryCodeApi - object-oriented interface
 * @export
 * @class LoginWithRecoveryCodeApi
 * @extends {BaseAPI}
 */
var LoginWithRecoveryCodeApi = /** @class */ (function (_super) {
    __extends(LoginWithRecoveryCodeApi, _super);
    function LoginWithRecoveryCodeApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Also sanitizes returnurl. Who could\'ve thought
     * @summary Logins user using 2fa recovery code
     * @param {string} [returnUrl]
     * @param {VLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel} [vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginWithRecoveryCodeApi
     */
    LoginWithRecoveryCodeApi.prototype.apiAuthLoginWithRecoveryCodePost = function (returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options) {
        var _this = this;
        return LoginWithRecoveryCodeApiFp(this.configuration).apiAuthLoginWithRecoveryCodePost(returnUrl, vLOBOARDSAreasAuthLoginWithRecoveryCodeInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LoginWithRecoveryCodeApi;
}(BaseAPI));
export { LoginWithRecoveryCodeApi };
/**
 * LogoutApi - axios parameter creator
 * @export
 */
export var LogoutApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Will sanitize returnurl
         * @summary Logs user out
         * @param {string} [returnUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost: function (returnUrl, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/Logout";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (returnUrl !== undefined) {
                        localVarQueryParameter['returnUrl'] = returnUrl;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * LogoutApi - functional programming interface
 * @export
 */
export var LogoutApiFp = function (configuration) {
    var localVarAxiosParamCreator = LogoutApiAxiosParamCreator(configuration);
    return {
        /**
         * Will sanitize returnurl
         * @summary Logs user out
         * @param {string} [returnUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost: function (returnUrl, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthLogoutPost(returnUrl, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * LogoutApi - factory interface
 * @export
 */
export var LogoutApiFactory = function (configuration, basePath, axios) {
    var localVarFp = LogoutApiFp(configuration);
    return {
        /**
         * Will sanitize returnurl
         * @summary Logs user out
         * @param {string} [returnUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost: function (returnUrl, options) {
            return localVarFp.apiAuthLogoutPost(returnUrl, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * LogoutApi - object-oriented interface
 * @export
 * @class LogoutApi
 * @extends {BaseAPI}
 */
var LogoutApi = /** @class */ (function (_super) {
    __extends(LogoutApi, _super);
    function LogoutApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Will sanitize returnurl
     * @summary Logs user out
     * @param {string} [returnUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoutApi
     */
    LogoutApi.prototype.apiAuthLogoutPost = function (returnUrl, options) {
        var _this = this;
        return LogoutApiFp(this.configuration).apiAuthLogoutPost(returnUrl, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LogoutApi;
}(BaseAPI));
export { LogoutApi };
/**
 * RegisterApi - axios parameter creator
 * @export
 */
export var RegisterApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthRegisterInputModel} [vLOBOARDSAreasAuthRegisterInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: function (returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/Register";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (returnUrl !== undefined) {
                        localVarQueryParameter['returnUrl'] = returnUrl;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthRegisterInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * RegisterApi - functional programming interface
 * @export
 */
export var RegisterApiFp = function (configuration) {
    var localVarAxiosParamCreator = RegisterApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthRegisterInputModel} [vLOBOARDSAreasAuthRegisterInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: function (returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthRegisterPost(returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * RegisterApi - factory interface
 * @export
 */
export var RegisterApiFactory = function (configuration, basePath, axios) {
    var localVarFp = RegisterApiFp(configuration);
    return {
        /**
         *
         * @param {string} [returnUrl]
         * @param {VLOBOARDSAreasAuthRegisterInputModel} [vLOBOARDSAreasAuthRegisterInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: function (returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options) {
            return localVarFp.apiAuthRegisterPost(returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * RegisterApi - object-oriented interface
 * @export
 * @class RegisterApi
 * @extends {BaseAPI}
 */
var RegisterApi = /** @class */ (function (_super) {
    __extends(RegisterApi, _super);
    function RegisterApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [returnUrl]
     * @param {VLOBOARDSAreasAuthRegisterInputModel} [vLOBOARDSAreasAuthRegisterInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisterApi
     */
    RegisterApi.prototype.apiAuthRegisterPost = function (returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options) {
        var _this = this;
        return RegisterApiFp(this.configuration).apiAuthRegisterPost(returnUrl, vLOBOARDSAreasAuthRegisterInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RegisterApi;
}(BaseAPI));
export { RegisterApi };
/**
 * ResendEmailConfirmationApi - axios parameter creator
 * @export
 */
export var ResendEmailConfirmationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Resends email confirmation
         * @param {VLOBOARDSAreasAuthResendEmailConfirmationInputModel} [vLOBOARDSAreasAuthResendEmailConfirmationInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResendEmailConfirmationPost: function (vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/ResendEmailConfirmation";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthResendEmailConfirmationInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ResendEmailConfirmationApi - functional programming interface
 * @export
 */
export var ResendEmailConfirmationApiFp = function (configuration) {
    var localVarAxiosParamCreator = ResendEmailConfirmationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Resends email confirmation
         * @param {VLOBOARDSAreasAuthResendEmailConfirmationInputModel} [vLOBOARDSAreasAuthResendEmailConfirmationInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResendEmailConfirmationPost: function (vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthResendEmailConfirmationPost(vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ResendEmailConfirmationApi - factory interface
 * @export
 */
export var ResendEmailConfirmationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ResendEmailConfirmationApiFp(configuration);
    return {
        /**
         *
         * @summary Resends email confirmation
         * @param {VLOBOARDSAreasAuthResendEmailConfirmationInputModel} [vLOBOARDSAreasAuthResendEmailConfirmationInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResendEmailConfirmationPost: function (vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options) {
            return localVarFp.apiAuthResendEmailConfirmationPost(vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ResendEmailConfirmationApi - object-oriented interface
 * @export
 * @class ResendEmailConfirmationApi
 * @extends {BaseAPI}
 */
var ResendEmailConfirmationApi = /** @class */ (function (_super) {
    __extends(ResendEmailConfirmationApi, _super);
    function ResendEmailConfirmationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Resends email confirmation
     * @param {VLOBOARDSAreasAuthResendEmailConfirmationInputModel} [vLOBOARDSAreasAuthResendEmailConfirmationInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResendEmailConfirmationApi
     */
    ResendEmailConfirmationApi.prototype.apiAuthResendEmailConfirmationPost = function (vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options) {
        var _this = this;
        return ResendEmailConfirmationApiFp(this.configuration).apiAuthResendEmailConfirmationPost(vLOBOARDSAreasAuthResendEmailConfirmationInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ResendEmailConfirmationApi;
}(BaseAPI));
export { ResendEmailConfirmationApi };
/**
 * ResetPasswordApi - axios parameter creator
 * @export
 */
export var ResetPasswordApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Changes the password to a new one based on input
         * @param {VLOBOARDSAreasAuthResetPasswordInputModel} [vLOBOARDSAreasAuthResetPasswordInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost: function (vLOBOARDSAreasAuthResetPasswordInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/ResetPassword";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthResetPasswordInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ResetPasswordApi - functional programming interface
 * @export
 */
export var ResetPasswordApiFp = function (configuration) {
    var localVarAxiosParamCreator = ResetPasswordApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Changes the password to a new one based on input
         * @param {VLOBOARDSAreasAuthResetPasswordInputModel} [vLOBOARDSAreasAuthResetPasswordInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost: function (vLOBOARDSAreasAuthResetPasswordInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthResetPasswordPost(vLOBOARDSAreasAuthResetPasswordInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ResetPasswordApi - factory interface
 * @export
 */
export var ResetPasswordApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ResetPasswordApiFp(configuration);
    return {
        /**
         *
         * @summary Changes the password to a new one based on input
         * @param {VLOBOARDSAreasAuthResetPasswordInputModel} [vLOBOARDSAreasAuthResetPasswordInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthResetPasswordPost: function (vLOBOARDSAreasAuthResetPasswordInputModel, options) {
            return localVarFp.apiAuthResetPasswordPost(vLOBOARDSAreasAuthResetPasswordInputModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ResetPasswordApi - object-oriented interface
 * @export
 * @class ResetPasswordApi
 * @extends {BaseAPI}
 */
var ResetPasswordApi = /** @class */ (function (_super) {
    __extends(ResetPasswordApi, _super);
    function ResetPasswordApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Changes the password to a new one based on input
     * @param {VLOBOARDSAreasAuthResetPasswordInputModel} [vLOBOARDSAreasAuthResetPasswordInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResetPasswordApi
     */
    ResetPasswordApi.prototype.apiAuthResetPasswordPost = function (vLOBOARDSAreasAuthResetPasswordInputModel, options) {
        var _this = this;
        return ResetPasswordApiFp(this.configuration).apiAuthResetPasswordPost(vLOBOARDSAreasAuthResetPasswordInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ResetPasswordApi;
}(BaseAPI));
export { ResetPasswordApi };
/**
 * ReturnUrlInfoApi - axios parameter creator
 * @export
 */
export var ReturnUrlInfoApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Use every time you need to check whether to redirect to returnurl
         * @summary Returns information about client associated with returnurl
         * @param {VLOBOARDSAreasAuthReturnUrlInfoInputModel} [vLOBOARDSAreasAuthReturnUrlInfoInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthReturnUrlInfoPost: function (vLOBOARDSAreasAuthReturnUrlInfoInputModel, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Auth/ReturnUrlInfo";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vLOBOARDSAreasAuthReturnUrlInfoInputModel, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ReturnUrlInfoApi - functional programming interface
 * @export
 */
export var ReturnUrlInfoApiFp = function (configuration) {
    var localVarAxiosParamCreator = ReturnUrlInfoApiAxiosParamCreator(configuration);
    return {
        /**
         * Use every time you need to check whether to redirect to returnurl
         * @summary Returns information about client associated with returnurl
         * @param {VLOBOARDSAreasAuthReturnUrlInfoInputModel} [vLOBOARDSAreasAuthReturnUrlInfoInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthReturnUrlInfoPost: function (vLOBOARDSAreasAuthReturnUrlInfoInputModel, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiAuthReturnUrlInfoPost(vLOBOARDSAreasAuthReturnUrlInfoInputModel, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ReturnUrlInfoApi - factory interface
 * @export
 */
export var ReturnUrlInfoApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ReturnUrlInfoApiFp(configuration);
    return {
        /**
         * Use every time you need to check whether to redirect to returnurl
         * @summary Returns information about client associated with returnurl
         * @param {VLOBOARDSAreasAuthReturnUrlInfoInputModel} [vLOBOARDSAreasAuthReturnUrlInfoInputModel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthReturnUrlInfoPost: function (vLOBOARDSAreasAuthReturnUrlInfoInputModel, options) {
            return localVarFp.apiAuthReturnUrlInfoPost(vLOBOARDSAreasAuthReturnUrlInfoInputModel, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ReturnUrlInfoApi - object-oriented interface
 * @export
 * @class ReturnUrlInfoApi
 * @extends {BaseAPI}
 */
var ReturnUrlInfoApi = /** @class */ (function (_super) {
    __extends(ReturnUrlInfoApi, _super);
    function ReturnUrlInfoApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Use every time you need to check whether to redirect to returnurl
     * @summary Returns information about client associated with returnurl
     * @param {VLOBOARDSAreasAuthReturnUrlInfoInputModel} [vLOBOARDSAreasAuthReturnUrlInfoInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReturnUrlInfoApi
     */
    ReturnUrlInfoApi.prototype.apiAuthReturnUrlInfoPost = function (vLOBOARDSAreasAuthReturnUrlInfoInputModel, options) {
        var _this = this;
        return ReturnUrlInfoApiFp(this.configuration).apiAuthReturnUrlInfoPost(vLOBOARDSAreasAuthReturnUrlInfoInputModel, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ReturnUrlInfoApi;
}(BaseAPI));
export { ReturnUrlInfoApi };
