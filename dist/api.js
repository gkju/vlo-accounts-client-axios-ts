/* tslint:disable */
/* eslint-disable */
/**
 * ASP.NETCore_suvlo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: gkjuszczyk@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from './base';
/**
 * ArticleApi - axios parameter creator
 * @export
 */
export var ArticleApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddEditorPut: function (vloMainAreasArticleUserArticleInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/AddEditor";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleUserArticleInput, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetArticleGet: function (articleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/GetArticle";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (articleId !== undefined) {
                        localVarQueryParameter['ArticleId'] = articleId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetContentGet: function (articleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/GetContent";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (articleId !== undefined) {
                        localVarQueryParameter['ArticleId'] = articleId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetPictureGet: function (articleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/GetPicture";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (articleId !== undefined) {
                        localVarQueryParameter['ArticleId'] = articleId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetTagsGet: function (articleId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/GetTags";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (articleId !== undefined) {
                        localVarQueryParameter['ArticleId'] = articleId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Creates a blank article and returns its ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePost: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePut: function (vloMainAreasArticleArticleUpdateInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleUpdateInput, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleRemoveEditorDelete: function (vloMainAreasArticleUserArticleInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/RemoveEditor";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleUserArticleInput, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSearchArticlesGet: function (query, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/SearchArticles";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (query !== undefined) {
                        localVarQueryParameter['query'] = query;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} articleId
         * @param {any} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPicturePost: function (articleId, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'articleId' is not null or undefined
                    assertParamExists('apiArticlesArticleSetPicturePost', 'articleId', articleId);
                    // verify required parameter 'file' is not null or undefined
                    assertParamExists('apiArticlesArticleSetPicturePost', 'file', file);
                    localVarPath = "/api/Articles/Article/SetPicture";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                    if (articleId !== undefined) {
                        localVarFormParams.append('ArticleId', articleId);
                    }
                    if (file !== undefined) {
                        localVarFormParams.append('File', file);
                    }
                    localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = localVarFormParams;
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleControllerArticleBoolInput} [vloMainAreasArticleArticleControllerArticleBoolInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublicPut: function (vloMainAreasArticleArticleControllerArticleBoolInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/SetPublic";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleControllerArticleBoolInput, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleControllerArticleDateInput} [vloMainAreasArticleArticleControllerArticleDateInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublishDatePut: function (vloMainAreasArticleArticleControllerArticleDateInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/SetPublishDate";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleControllerArticleDateInput, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetTitlePut: function (vloMainAreasArticleArticleControllerArticleTitleInput, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Articles/Article/SetTitle";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(vloMainAreasArticleArticleControllerArticleTitleInput, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ArticleApi - functional programming interface
 * @export
 */
export var ArticleApiFp = function (configuration) {
    var localVarAxiosParamCreator = ArticleApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddEditorPut: function (vloMainAreasArticleUserArticleInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetArticleGet: function (articleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleGetArticleGet(articleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetContentGet: function (articleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleGetContentGet(articleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetPictureGet: function (articleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleGetPictureGet(articleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetTagsGet: function (articleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleGetTagsGet(articleId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a blank article and returns its ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePost: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticlePost(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePut: function (vloMainAreasArticleArticleUpdateInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleRemoveEditorDelete: function (vloMainAreasArticleUserArticleInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSearchArticlesGet: function (query, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleSearchArticlesGet(query, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} articleId
         * @param {any} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPicturePost: function (articleId, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleSetPicturePost(articleId, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleControllerArticleBoolInput} [vloMainAreasArticleArticleControllerArticleBoolInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublicPut: function (vloMainAreasArticleArticleControllerArticleBoolInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleSetPublicPut(vloMainAreasArticleArticleControllerArticleBoolInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleControllerArticleDateInput} [vloMainAreasArticleArticleControllerArticleDateInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublishDatePut: function (vloMainAreasArticleArticleControllerArticleDateInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleSetPublishDatePut(vloMainAreasArticleArticleControllerArticleDateInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetTitlePut: function (vloMainAreasArticleArticleControllerArticleTitleInput, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * ArticleApi - factory interface
 * @export
 */
export var ArticleApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ArticleApiFp(configuration);
    return {
        /**
         *
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleAddEditorPut: function (vloMainAreasArticleUserArticleInput, options) {
            return localVarFp.apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetArticleGet: function (articleId, options) {
            return localVarFp.apiArticlesArticleGetArticleGet(articleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetContentGet: function (articleId, options) {
            return localVarFp.apiArticlesArticleGetContentGet(articleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetPictureGet: function (articleId, options) {
            return localVarFp.apiArticlesArticleGetPictureGet(articleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleGetTagsGet: function (articleId, options) {
            return localVarFp.apiArticlesArticleGetTagsGet(articleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates a blank article and returns its ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePost: function (options) {
            return localVarFp.apiArticlesArticlePost(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticlePut: function (vloMainAreasArticleArticleUpdateInput, options) {
            return localVarFp.apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleRemoveEditorDelete: function (vloMainAreasArticleUserArticleInput, options) {
            return localVarFp.apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSearchArticlesGet: function (query, options) {
            return localVarFp.apiArticlesArticleSearchArticlesGet(query, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} articleId
         * @param {any} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPicturePost: function (articleId, file, options) {
            return localVarFp.apiArticlesArticleSetPicturePost(articleId, file, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleControllerArticleBoolInput} [vloMainAreasArticleArticleControllerArticleBoolInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublicPut: function (vloMainAreasArticleArticleControllerArticleBoolInput, options) {
            return localVarFp.apiArticlesArticleSetPublicPut(vloMainAreasArticleArticleControllerArticleBoolInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleControllerArticleDateInput} [vloMainAreasArticleArticleControllerArticleDateInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetPublishDatePut: function (vloMainAreasArticleArticleControllerArticleDateInput, options) {
            return localVarFp.apiArticlesArticleSetPublishDatePut(vloMainAreasArticleArticleControllerArticleDateInput, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiArticlesArticleSetTitlePut: function (vloMainAreasArticleArticleControllerArticleTitleInput, options) {
            return localVarFp.apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
var ArticleApi = /** @class */ (function (_super) {
    __extends(ArticleApi, _super);
    function ArticleApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleAddEditorPut = function (vloMainAreasArticleUserArticleInput, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleAddEditorPut(vloMainAreasArticleUserArticleInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [articleId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleGetArticleGet = function (articleId, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleGetArticleGet(articleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [articleId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleGetContentGet = function (articleId, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleGetContentGet(articleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [articleId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleGetPictureGet = function (articleId, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleGetPictureGet(articleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [articleId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleGetTagsGet = function (articleId, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleGetTagsGet(articleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates a blank article and returns its ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticlePost = function (options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticlePost(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {VloMainAreasArticleArticleUpdateInput} [vloMainAreasArticleArticleUpdateInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticlePut = function (vloMainAreasArticleArticleUpdateInput, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticlePut(vloMainAreasArticleArticleUpdateInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {VloMainAreasArticleUserArticleInput} [vloMainAreasArticleUserArticleInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleRemoveEditorDelete = function (vloMainAreasArticleUserArticleInput, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleRemoveEditorDelete(vloMainAreasArticleUserArticleInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [query]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleSearchArticlesGet = function (query, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleSearchArticlesGet(query, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} articleId
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleSetPicturePost = function (articleId, file, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleSetPicturePost(articleId, file, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {VloMainAreasArticleArticleControllerArticleBoolInput} [vloMainAreasArticleArticleControllerArticleBoolInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleSetPublicPut = function (vloMainAreasArticleArticleControllerArticleBoolInput, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleSetPublicPut(vloMainAreasArticleArticleControllerArticleBoolInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {VloMainAreasArticleArticleControllerArticleDateInput} [vloMainAreasArticleArticleControllerArticleDateInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleSetPublishDatePut = function (vloMainAreasArticleArticleControllerArticleDateInput, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleSetPublishDatePut(vloMainAreasArticleArticleControllerArticleDateInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {VloMainAreasArticleArticleControllerArticleTitleInput} [vloMainAreasArticleArticleControllerArticleTitleInput]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    ArticleApi.prototype.apiArticlesArticleSetTitlePut = function (vloMainAreasArticleArticleControllerArticleTitleInput, options) {
        var _this = this;
        return ArticleApiFp(this.configuration).apiArticlesArticleSetTitlePut(vloMainAreasArticleArticleControllerArticleTitleInput, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ArticleApi;
}(BaseAPI));
export { ArticleApi };
/**
 * FileApi - axios parameter creator
 * @export
 */
export var FileApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [folderId]
         * @param {string} [fileId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFilePost: function (folderId, fileId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/AddSubFile";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (folderId !== undefined) {
                        localVarQueryParameter['FolderId'] = folderId;
                    }
                    if (fileId !== undefined) {
                        localVarQueryParameter['FileId'] = fileId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [parentId]
         * @param {string} [childId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFolderPost: function (parentId, childId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/AddSubFolder";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (parentId !== undefined) {
                        localVarQueryParameter['ParentId'] = parentId;
                    }
                    if (childId !== undefined) {
                        localVarQueryParameter['ChildId'] = childId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileCreateFolderPost: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/CreateFolder";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (name !== undefined) {
                        localVarQueryParameter['name'] = name;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [fileId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFileDelete: function (fileId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/DeleteFile";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (fileId !== undefined) {
                        localVarQueryParameter['fileId'] = fileId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [folderId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFolderDelete: function (folderId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/DeleteFolder";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (folderId !== undefined) {
                        localVarQueryParameter['FolderId'] = folderId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFileGet: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/GetFile";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (id !== undefined) {
                        localVarQueryParameter['id'] = id;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFilesInfoGet: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/GetFilesInfo";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (id !== undefined) {
                        localVarQueryParameter['id'] = id;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetMyArticlesGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/GetMyArticles";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetUserFoldersFilesGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/GetUserFoldersFiles";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [folderId]
         * @param {string} [fileId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFileDelete: function (folderId, fileId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/RemoveSubFile";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (folderId !== undefined) {
                        localVarQueryParameter['FolderId'] = folderId;
                    }
                    if (fileId !== undefined) {
                        localVarQueryParameter['FileId'] = fileId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [parentId]
         * @param {string} [childId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFolderDelete: function (parentId, childId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/RemoveSubFolder";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (parentId !== undefined) {
                        localVarQueryParameter['ParentId'] = parentId;
                    }
                    if (childId !== undefined) {
                        localVarQueryParameter['ChildId'] = childId;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {boolean} [isPublic]
         * @param {any} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileUploadFilePost: function (isPublic, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/FileManagement/File/UploadFile";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                    if (isPublic !== undefined) {
                        localVarQueryParameter['isPublic'] = isPublic;
                    }
                    if (file !== undefined) {
                        localVarFormParams.append('file', file);
                    }
                    localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = localVarFormParams;
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * FileApi - functional programming interface
 * @export
 */
export var FileApiFp = function (configuration) {
    var localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} [folderId]
         * @param {string} [fileId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFilePost: function (folderId, fileId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileAddSubFilePost(folderId, fileId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [parentId]
         * @param {string} [childId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFolderPost: function (parentId, childId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileAddSubFolderPost(parentId, childId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileCreateFolderPost: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileCreateFolderPost(name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [fileId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFileDelete: function (fileId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileDeleteFileDelete(fileId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [folderId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFolderDelete: function (folderId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileDeleteFolderDelete(folderId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFileGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileGetFileGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFilesInfoGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileGetFilesInfoGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetMyArticlesGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileGetMyArticlesGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetUserFoldersFilesGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileGetUserFoldersFilesGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [folderId]
         * @param {string} [fileId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFileDelete: function (folderId, fileId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileRemoveSubFileDelete(folderId, fileId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [parentId]
         * @param {string} [childId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFolderDelete: function (parentId, childId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileRemoveSubFolderDelete(parentId, childId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {boolean} [isPublic]
         * @param {any} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileUploadFilePost: function (isPublic, file, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiFileManagementFileUploadFilePost(isPublic, file, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * FileApi - factory interface
 * @export
 */
export var FileApiFactory = function (configuration, basePath, axios) {
    var localVarFp = FileApiFp(configuration);
    return {
        /**
         *
         * @param {string} [folderId]
         * @param {string} [fileId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFilePost: function (folderId, fileId, options) {
            return localVarFp.apiFileManagementFileAddSubFilePost(folderId, fileId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [parentId]
         * @param {string} [childId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileAddSubFolderPost: function (parentId, childId, options) {
            return localVarFp.apiFileManagementFileAddSubFolderPost(parentId, childId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [name]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileCreateFolderPost: function (name, options) {
            return localVarFp.apiFileManagementFileCreateFolderPost(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [fileId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFileDelete: function (fileId, options) {
            return localVarFp.apiFileManagementFileDeleteFileDelete(fileId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [folderId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileDeleteFolderDelete: function (folderId, options) {
            return localVarFp.apiFileManagementFileDeleteFolderDelete(folderId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFileGet: function (id, options) {
            return localVarFp.apiFileManagementFileGetFileGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetFilesInfoGet: function (id, options) {
            return localVarFp.apiFileManagementFileGetFilesInfoGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetMyArticlesGet: function (options) {
            return localVarFp.apiFileManagementFileGetMyArticlesGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileGetUserFoldersFilesGet: function (options) {
            return localVarFp.apiFileManagementFileGetUserFoldersFilesGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [folderId]
         * @param {string} [fileId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFileDelete: function (folderId, fileId, options) {
            return localVarFp.apiFileManagementFileRemoveSubFileDelete(folderId, fileId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [parentId]
         * @param {string} [childId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileRemoveSubFolderDelete: function (parentId, childId, options) {
            return localVarFp.apiFileManagementFileRemoveSubFolderDelete(parentId, childId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {boolean} [isPublic]
         * @param {any} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileManagementFileUploadFilePost: function (isPublic, file, options) {
            return localVarFp.apiFileManagementFileUploadFilePost(isPublic, file, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
var FileApi = /** @class */ (function (_super) {
    __extends(FileApi, _super);
    function FileApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [folderId]
     * @param {string} [fileId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileAddSubFilePost = function (folderId, fileId, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileAddSubFilePost(folderId, fileId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [parentId]
     * @param {string} [childId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileAddSubFolderPost = function (parentId, childId, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileAddSubFolderPost(parentId, childId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileCreateFolderPost = function (name, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileCreateFolderPost(name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [fileId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileDeleteFileDelete = function (fileId, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileDeleteFileDelete(fileId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [folderId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileDeleteFolderDelete = function (folderId, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileDeleteFolderDelete(folderId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileGetFileGet = function (id, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileGetFileGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileGetFilesInfoGet = function (id, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileGetFilesInfoGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileGetMyArticlesGet = function (options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileGetMyArticlesGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileGetUserFoldersFilesGet = function (options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileGetUserFoldersFilesGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [folderId]
     * @param {string} [fileId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileRemoveSubFileDelete = function (folderId, fileId, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileRemoveSubFileDelete(folderId, fileId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [parentId]
     * @param {string} [childId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileRemoveSubFolderDelete = function (parentId, childId, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileRemoveSubFolderDelete(parentId, childId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {boolean} [isPublic]
     * @param {any} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    FileApi.prototype.apiFileManagementFileUploadFilePost = function (isPublic, file, options) {
        var _this = this;
        return FileApiFp(this.configuration).apiFileManagementFileUploadFilePost(isPublic, file, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FileApi;
}(BaseAPI));
export { FileApi };
/**
 * TagApi - axios parameter creator
 * @export
 */
export var TagApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [articleId]
         * @param {string} [tagContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagAddToArticlePost: function (articleId, tagContent, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Tags/Tag/AddToArticle";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (articleId !== undefined) {
                        localVarQueryParameter['articleId'] = articleId;
                    }
                    if (tagContent !== undefined) {
                        localVarQueryParameter['tagContent'] = tagContent;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [tagContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagPost: function (tagContent, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Tags/Tag";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (tagContent !== undefined) {
                        localVarQueryParameter['tagContent'] = tagContent;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {string} [tagContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagRemoveFromArticleDelete: function (articleId, tagContent, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Tags/Tag/RemoveFromArticle";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (articleId !== undefined) {
                        localVarQueryParameter['articleId'] = articleId;
                    }
                    if (tagContent !== undefined) {
                        localVarQueryParameter['tagContent'] = tagContent;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagSearchGet: function (query, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/api/Tags/Tag/Search";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (query !== undefined) {
                        localVarQueryParameter['query'] = query;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * TagApi - functional programming interface
 * @export
 */
export var TagApiFp = function (configuration) {
    var localVarAxiosParamCreator = TagApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} [articleId]
         * @param {string} [tagContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagAddToArticlePost: function (articleId, tagContent, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiTagsTagAddToArticlePost(articleId, tagContent, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [tagContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagPost: function (tagContent, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiTagsTagPost(tagContent, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {string} [tagContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagRemoveFromArticleDelete: function (articleId, tagContent, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiTagsTagRemoveFromArticleDelete(articleId, tagContent, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagSearchGet: function (query, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.apiTagsTagSearchGet(query, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
/**
 * TagApi - factory interface
 * @export
 */
export var TagApiFactory = function (configuration, basePath, axios) {
    var localVarFp = TagApiFp(configuration);
    return {
        /**
         *
         * @param {string} [articleId]
         * @param {string} [tagContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagAddToArticlePost: function (articleId, tagContent, options) {
            return localVarFp.apiTagsTagAddToArticlePost(articleId, tagContent, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [tagContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagPost: function (tagContent, options) {
            return localVarFp.apiTagsTagPost(tagContent, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [articleId]
         * @param {string} [tagContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagRemoveFromArticleDelete: function (articleId, tagContent, options) {
            return localVarFp.apiTagsTagRemoveFromArticleDelete(articleId, tagContent, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsTagSearchGet: function (query, options) {
            return localVarFp.apiTagsTagSearchGet(query, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
var TagApi = /** @class */ (function (_super) {
    __extends(TagApi, _super);
    function TagApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [articleId]
     * @param {string} [tagContent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    TagApi.prototype.apiTagsTagAddToArticlePost = function (articleId, tagContent, options) {
        var _this = this;
        return TagApiFp(this.configuration).apiTagsTagAddToArticlePost(articleId, tagContent, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [tagContent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    TagApi.prototype.apiTagsTagPost = function (tagContent, options) {
        var _this = this;
        return TagApiFp(this.configuration).apiTagsTagPost(tagContent, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [articleId]
     * @param {string} [tagContent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    TagApi.prototype.apiTagsTagRemoveFromArticleDelete = function (articleId, tagContent, options) {
        var _this = this;
        return TagApiFp(this.configuration).apiTagsTagRemoveFromArticleDelete(articleId, tagContent, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [query]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    TagApi.prototype.apiTagsTagSearchGet = function (query, options) {
        var _this = this;
        return TagApiFp(this.configuration).apiTagsTagSearchGet(query, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TagApi;
}(BaseAPI));
export { TagApi };
